基本配置：
1、clientPort：默认情况下，服务器会监听在所有的网络连接接口的这个端口上，除非设置了clientPortAddress参数。
2、dataDir和dataLogDir：dataDir用于配置内存数据库保存的模糊快照的目录，如果某个服务器为集群中的一台，id文件也保存在
该目录下。
dataLogDir：服务器会尝试进行顺序写入事务日志，以为服务端在确认一个事务前必须将数据同步到存储中，这个参数最好还是配置。
3、tickTime：tick的时长单位为毫秒，tick为zookeeper使用的基本的时间度量单位，该值还决定了会话超时的存储器大小。
zookeeper集群中使用的超时时间单位通过tickTime指定，也就说，实际上tickTime设置了超时时间的下限值，因为最小的超时时间
为一个tick时间，客户端最小会话超时时间为两个tick时间。tickTime的默认值为3000毫秒。

存储配置：
1、preAllocSize：用于设置预分配的事务日志文件的大小值，以KB为单位。当写入事务日志文件时，服务端每次回分配preAllocSize
值的KB的存储大小，通过这种方式可以分摊文件系统将磁盘分配存储空间和更新元数据的开销。也减少了文件的寻址操作次数。
如果我们每1000个事务进行一次快照，每个事务的平均大小为100字节，那么100KB的preAllocSize值更合适，默认的preAllocSize
值的设置适用于默认的snapCopunt值和平均事务超过512字节的情况。
2、snapCount：指定每次快照之间的事务数。
3、autopurge.snapRetainCount：zookeeper将会定期对快照和事务日志进行垃圾回收操作，autopurge.snapRetainCount值指
定了垃圾回收需要保留的快照数，显然，并不是所有的快照都可以被删除，因为那样就不可能进行服务器的恢复操作。
autopurge.snapRetainCount的最小值为3，也是默认值。
4、autopurge.purgeInterval：对快照和日志进行垃圾回收操作的时间间隔的小时数，如果设置为0，垃圾回收不自动执行，而需要
通过zookeeper发行包中的zkCleanup.sh脚本手动运行。
5、fsync.warningthresholdms：zookeeper服务器在应答变化消息前会同步变化情况到存储中。如果同步系统调用消耗了太长时间，
系统性能就会受到严重影响，服务器会跟踪同步调用的持续时间，如果超过fsync.warningthresholdms值就会产生一个警告消息，默
认情况下，该值为1000毫秒。

网络配置：
1、globalOutstandingLimit：zookeeper客户端提交请求比服务端处理请求要快很多，服务端将会对接收到的请求队列化，最终，也许几
秒钟，可能导致服务器的内存溢出，为了防止这个情况，如果待处理请求达到globalOutstandingLimit值就会限制客户端的请求。
该参数默认为1000个请求，你可能并不需要改变这个值。
2、maxClientCnxns：一个连接的建立所使用的资源远远高于正常操作请求所使用的资源，我们曾看到过某些错误的客户端每秒创建很多
zookeeper连接，最后导致拒绝服务。为了解决这个问题，可以在某个ip地址已经有maxClientCnxns个连接时拒绝该ip地址新的连接，
该选项默认值为60个并发连接。
3、minSessionTimeout：最小会话超时时间，单位为毫秒。默认值为tickTime的两倍。
4、maxSessionTimeout：最大会话超时时间，单位为毫秒，默认值为tickTime的20倍。

集群配置
1、initLimit：对于追随者最初连接到群首时的超时值，单位为tick值的倍数。
如果zookeeper中保存的数据量特别大，即存在大量的znode节点或大数据集，或者网络非常慢，就需要增大initLimit值，因为该值取
决于环境问题，所有没有默认值。
2、syncLimit：对于追随者与群首进行sync操作时的超时值，单位为tick的倍数。
追随者总是会稍稍落后于群首，但是如果因为服务器负载或网络问题，就会导致追随者落后群首太多，设置需要放弃该追随者，如果群首与
追随者无法进行sync操作，而且超过了syncLimit的tick时间，就会放弃该追随者。
该参数也没有默认值。
3、leaderServers：该标志如果设置为no就可以使群首除去服务客户端连接的负担，使群首将所有资源用于处理追随者发送给它的变更
操作请求，这样可以提高系统状态变更操作的吞吐能力。
默认值为yes。
4、server.x=[hostname]:n:n[:observer]：后面跟着两个tcp端口号，第一个用于事务的发送，第二个用于群首的选举，典型的端
口号配置为2888:3888。如果最后一个字段标记了observer属性，服务器就会进入观察者模式。
注意，所有的服务器使用相同的server.x配置信息。

重配置：
你将要开始配置一个由三个不同的服务器组成的zookeeper集群，但是一个月后，你发现使用zookeeper的客户端越来越多，因此你需要
增加集群服务器到五个，此时可以使用动态配置，版本号为3.5.0。

客户端连接字符串管理：
对主机名我们很自然的想到可以解析为一个ip地址，但实际上，一个主机名可以解析为多个ip地址，如果主机名解析为多个ip地址，
zookeeper就可以连接到其中的任何地址。还有一些注意事项，首先，所有的服务器必须使用相同的客户端端口号，其次，主机名解析只有
在创建连接时才会发生，所以已经连接的客户端无法知道最新的名称解析。

已保存的zookeeper数据的应用：
你只需要简单地将这些数据文件进行备份，就可以轻易地完成zookeeper服务器的备份，如果你采用这种方式进行备份，还需要注意一些
问题。首先，zookeeper为复制服务，所以系统中存在冗余信息，如果你进行备份操作，你只需要备份其中一台服务器的数据信息。
如果你使用旧的备份文件恢复一个服务器，就会导致服务器违反其承诺。如果刚刚遭遇了所有服务器数据丢失的情况，这可能不是大问题，
但如果你的集群在正常工作中，而你将某个服务器还原为旧的状态，你的行为可能会导致其他服务器也丢失了某些信息。
如果你要对全部或大多数服务器进行数据丢失的恢复操作，最好的办法是使用你最新抓取的状态信息（从最新的存活的服务器上获取备份
文件），并在启动服务器之前将状态信息拷贝到其他所有服务器上。

四字母命令：
1、ruok：提供有限的服务器状态信息，如果服务器正在运行，就会返回imok信息。
2、stat：提供了服务器的状态信息和当前活动的连接情况，状态信息包括一些基本的统计信息，还包括该服务器当前是否处于活动状态，
即作为群首或追随者，该服务器所知的最后的zxid信息。
3、srvr：提供的信息与stat一样，只是忽略了连接情况的信息。
4、dump：提供会话信息，列出当前活动的会话信息以及这些会话的过期时间，该命令只能在群首服务器上运行。
5、conf：列出该服务器启动运行所使用的基本配置参数。
6、envi：列出各种各样的java环境参数。
7、mntr：提供了比stat命令更加详细的服务器统计数据。
8、wchs：列出该服务器所跟踪的监视点的简短摘要信息。
9、wchc：列出该服务器所跟踪的监视点的详细信息，根据会话进行分组。
10、wchp：列出该服务器所跟踪的监视点的详细信息，根据被设置监视点的znode节点路径进行分组。
11、cons、crst：cons列出该服务器上每个连接的详细统计信息，crst重置这些连接信息中的计数器为0。